// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users (email, password_hash)
VALUES
  ($1, $2)
`

type CreateUserParams struct {
	Email        string
	PasswordHash []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Email, arg.PasswordHash)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password_hash FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           int64
	PasswordHash []byte
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(SELECT true FROM users WHERE id = $1)
`

func (q *Queries) UserExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, userExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
