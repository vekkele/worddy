// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: review.sql

package db

import (
	"context"
)

const addReviewWord = `-- name: AddReviewWord :exec
INSERT INTO review_words (word_id, user_id) 
  VALUES ($1, $2)
  ON CONFLICT DO NOTHING
`

type AddReviewWordParams struct {
	WordID int64
	UserID int64
}

func (q *Queries) AddReviewWord(ctx context.Context, arg AddReviewWordParams) error {
	_, err := q.db.Exec(ctx, addReviewWord, arg.WordID, arg.UserID)
	return err
}

const commitWrongReviewAnswer = `-- name: CommitWrongReviewAnswer :exec
UPDATE review_words
  SET wrong_answers = wrong_answers + 1
  WHERE word_id = $1 AND user_id = $2
`

type CommitWrongReviewAnswerParams struct {
	WordID int64
	UserID int64
}

func (q *Queries) CommitWrongReviewAnswer(ctx context.Context, arg CommitWrongReviewAnswerParams) error {
	_, err := q.db.Exec(ctx, commitWrongReviewAnswer, arg.WordID, arg.UserID)
	return err
}

const deleteReviewWord = `-- name: DeleteReviewWord :exec
DELETE FROM review_words
  WHERE word_id = $1 AND user_id = $2
`

type DeleteReviewWordParams struct {
	WordID int64
	UserID int64
}

func (q *Queries) DeleteReviewWord(ctx context.Context, arg DeleteReviewWordParams) error {
	_, err := q.db.Exec(ctx, deleteReviewWord, arg.WordID, arg.UserID)
	return err
}

const getNextReviewWord = `-- name: GetNextReviewWord :one
SELECT DISTINCT ON (wrong_answers) wrong_answers, word_id, user_id
  FROM review_words
  WHERE user_id = $1
  ORDER BY wrong_answers
  LIMIT 1
`

type GetNextReviewWordRow struct {
	WrongAnswers int32
	WordID       int64
	UserID       int64
}

func (q *Queries) GetNextReviewWord(ctx context.Context, userID int64) (GetNextReviewWordRow, error) {
	row := q.db.QueryRow(ctx, getNextReviewWord, userID)
	var i GetNextReviewWordRow
	err := row.Scan(&i.WrongAnswers, &i.WordID, &i.UserID)
	return i, err
}

const getReviewWrongAnswers = `-- name: GetReviewWrongAnswers :one
SELECT wrong_answers FROM review_words
  WHERE word_id = $1 AND user_id = $2
`

type GetReviewWrongAnswersParams struct {
	WordID int64
	UserID int64
}

func (q *Queries) GetReviewWrongAnswers(ctx context.Context, arg GetReviewWrongAnswersParams) (int32, error) {
	row := q.db.QueryRow(ctx, getReviewWrongAnswers, arg.WordID, arg.UserID)
	var wrong_answers int32
	err := row.Scan(&wrong_answers)
	return wrong_answers, err
}
